[
    {
        "id": "0f058a7f547c3458",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "034191611f502241",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41efd0c335674981",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "286d18d6ca53faf7",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "get postcode",
        "style": {
            "stroke": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "fc807377bb8b1261",
            "dd984ef51058f4b8",
            "d89f7bfce63ec593",
            "f05d252014a14da8"
        ],
        "x": 314,
        "y": 679,
        "w": 252,
        "h": 202
    },
    {
        "id": "60cc3d0fc0589906",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "query co2 data",
        "style": {
            "label": true,
            "stroke": "#d1d1d1"
        },
        "nodes": [
            "29c7a734cf779ba6",
            "b38591e91048886b",
            "561c3d1db08a9eee",
            "56d1c2bf0b4b0c8b"
        ],
        "x": 614,
        "y": 679,
        "w": 352,
        "h": 202
    },
    {
        "id": "383517d3593c4462",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "Open Weather Map",
        "style": {
            "label": true
        },
        "nodes": [
            "9bcb90ead09b4e17",
            "6cfee572ec80409c",
            "4e9d3afb56f90305",
            "8079f55531a39d92",
            "45bb37d930728718"
        ],
        "x": 314,
        "y": 439,
        "w": 452,
        "h": 222
    },
    {
        "id": "301454ba5f8b69c6",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "Met Office",
        "style": {
            "label": true
        },
        "nodes": [
            "60980e89ea9bcfa2",
            "86dce4587f537dc5",
            "1b14e8944872d3bd",
            "af4a05c086fff45c",
            "e095e9be7c46b4d1"
        ],
        "x": 334,
        "y": 239,
        "w": 432,
        "h": 182
    },
    {
        "id": "f10e786ea3228617",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "RSE",
        "style": {
            "label": true
        },
        "nodes": [
            "63a00b74a57e51c1",
            "c95d3b1c0bd5be2c",
            "704b4376dccc1cdc",
            "b08f14b46fd79d6e",
            "db6552e860a41559",
            "604d200bc9ec2044",
            "daf5ce5827f10fa0"
        ],
        "x": 454,
        "y": 39,
        "w": 732,
        "h": 162
    },
    {
        "id": "de3ca48ba0467e38",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "SLIMJAB Solar & Wind Power Predictions",
        "style": {
            "label": true
        },
        "nodes": [
            "14e9066473542cf7",
            "c7377789b13b2617",
            "e118c5c9d1963b6b",
            "2d41fd167df8b7f8",
            "055f799e3ee4baaf"
        ],
        "x": 814,
        "y": 239,
        "w": 432,
        "h": 202
    },
    {
        "id": "451de0b60f30a017",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "elexon DERSY",
        "style": {
            "label": true
        },
        "nodes": [
            "f14be92741d47d3f",
            "b535743cbf53aeee",
            "aaa2f743cd03ab41",
            "d0672dbd8577b0a0",
            "5ce37c996f8be3b4"
        ],
        "x": 374,
        "y": 899,
        "w": 492,
        "h": 162
    },
    {
        "id": "59101f8bda45ee05",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "elexon B1620",
        "style": {
            "label": true
        },
        "nodes": [
            "360f5eb08bc78624",
            "e3b8279b1d1931f5",
            "b1522bca7938df32",
            "3b2b022345cea635",
            "87b60729bba7901e"
        ],
        "x": 494,
        "y": 1079,
        "w": 432,
        "h": 162
    },
    {
        "id": "4a02678af8a8f82d",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "elexon B0620",
        "style": {
            "label": true
        },
        "nodes": [
            "31c16149e6bf119a",
            "ae0ab5e063239ec3",
            "1f7b72513a3d5c1d",
            "e991ff1c92974ab9"
        ],
        "x": 554,
        "y": 1259,
        "w": 452,
        "h": 122
    },
    {
        "id": "109427101203db3b",
        "type": "group",
        "z": "41efd0c335674981",
        "name": "rse market data",
        "style": {
            "label": true
        },
        "nodes": [
            "706862024e9862c1",
            "5d5bd7850877bb8c",
            "e568e1c03163a8bb",
            "d7f8e55bab0f51fa",
            "7494caf36e80f674",
            "b0d0d92ca5809d46",
            "eb1d5be025b20f15"
        ],
        "x": 414,
        "y": 1419,
        "w": 632,
        "h": 182
    },
    {
        "id": "a1c86bd095899ec8",
        "type": "MySQLdatabase",
        "name": "llanwrytd",
        "host": "aimlac-database",
        "port": "3306",
        "db": "llanwrytd",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "63a00b74a57e51c1",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "f10e786ea3228617",
        "name": "Llanwrtyd Power",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 730,
        "y": 160,
        "wires": [
            [
                "daf5ce5827f10fa0"
            ]
        ]
    },
    {
        "id": "e81d35d24659427b",
        "type": "inject",
        "z": "41efd0c335674981",
        "name": "fetch RSE",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "db6552e860a41559"
            ]
        ]
    },
    {
        "id": "c95d3b1c0bd5be2c",
        "type": "http request",
        "z": "41efd0c335674981",
        "d": true,
        "g": "f10e786ea3228617",
        "name": "Llanwrtyd 30m Average Power",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1030,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "650629a32d8e0fb5",
        "type": "debug",
        "z": "41efd0c335674981",
        "name": "internal log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 740,
        "wires": []
    },
    {
        "id": "704b4376dccc1cdc",
        "type": "template",
        "z": "41efd0c335674981",
        "g": "f10e786ea3228617",
        "name": "make url",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "http://{{AIMLAC_RSE_ADDR}}/sim/llanwrtyd-wells",
        "output": "str",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "63a00b74a57e51c1",
                "b08f14b46fd79d6e"
            ]
        ]
    },
    {
        "id": "b08f14b46fd79d6e",
        "type": "template",
        "z": "41efd0c335674981",
        "g": "f10e786ea3228617",
        "name": "append destination",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{url}}/30m-average-power",
        "output": "str",
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "c95d3b1c0bd5be2c"
            ]
        ]
    },
    {
        "id": "60980e89ea9bcfa2",
        "type": "change",
        "z": "41efd0c335674981",
        "g": "301454ba5f8b69c6",
        "name": "add ENV [MET]",
        "rules": [
            {
                "t": "set",
                "p": "api_key",
                "pt": "msg",
                "to": "MET_API_KEY",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "secret_key",
                "pt": "msg",
                "to": "MET_SECRET_KEY",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "latitude",
                "pt": "msg",
                "to": "LOCATION_LAT",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "longitude",
                "pt": "msg",
                "to": "LOCATION_LON",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "noParamNames",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "86dce4587f537dc5"
            ]
        ]
    },
    {
        "id": "db6552e860a41559",
        "type": "change",
        "z": "41efd0c335674981",
        "g": "f10e786ea3228617",
        "name": "add ENV [RSE]",
        "rules": [
            {
                "t": "set",
                "p": "AIMLAC_RSE_ADDR",
                "pt": "msg",
                "to": "AIMLAC_RSE_ADDR",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 120,
        "wires": [
            [
                "704b4376dccc1cdc"
            ]
        ]
    },
    {
        "id": "604d200bc9ec2044",
        "type": "comment",
        "z": "41efd0c335674981",
        "g": "f10e786ea3228617",
        "name": "needs timestamp",
        "info": "",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "daf5ce5827f10fa0",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "f10e786ea3228617",
        "name": "assemble onsite insert (sanitized)",
        "func": "\nmsg.topic = \"INSERT INTO energy_onsite (\"\n        + \"`time`, `hq_power`, `hq_temperature`, `computing_center`, `solar`, `wind1`, `wind2`, `wind3`, `wind4`, `windA`, `windB`\"\n    + \") VALUES (\"\n        + \":timedate, :hq_power, :hq_temperature, :computing_center, :solar, :wind1, :wind2, :wind3, :wind4, :windA, :windB\"\n    + \");\";\n\nvar data = msg.payload.elements;\nvar payload = {};\n\npayload.solar = data[\"Llanwrtyd Wells - Solar Generator\"].power;\npayload.wind1 = data[\"Llanwrtyd Wells - Wind Generator 1\"].power;\npayload.wind2 = data[\"Llanwrtyd Wells - Wind Generator 2\"].power;\npayload.wind3 = data[\"Llanwrtyd Wells - Wind Generator 3\"].power;\npayload.wind4 = data[\"Llanwrtyd Wells - Wind Generator 4\"].power;\npayload.windA = data[\"Llanwrtyd Wells - Wind Generator A\"].power;\npayload.windB = data[\"Llanwrtyd Wells - Wind Generator B\"].power;\n\npayload.hq_power = data[\"AIMLAC HQ Llanwrtyd Wells\"].power;\npayload.hq_temperature = data[\"AIMLAC HQ Llanwrtyd Wells\"].temperature;\npayload.computing_center = data[\"Llanwrtyd Wells - Computing Centre\"].power;\n\npayload.timedate = msg.payload.timedate;\n\n// do sanitization\nObject.keys(payload)\n    .filter(k => k != \"timedate\" )\n    .forEach((k, i) => {\n        var val = payload[k];\n        if ( !Number.isFinite(val) ) {\n            throw Error(k + \" is not a number (\" + val + \")\");\n        }\n    });\n\nvar parsed_date = new Date(payload.timedate);\nif ( isNaN(parsed_date.valueOf()) ) {\n    throw Error(\"Invalid date \", msg.payload.timedate);\n}\n\npayload.timedate = parsed_date;\n\n// overwrite payload\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 160,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "266f8a59dd662b3b",
        "type": "debug",
        "z": "41efd0c335674981",
        "name": "log",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 780,
        "wires": []
    },
    {
        "id": "3b494bc551a1e62d",
        "type": "inject",
        "z": "41efd0c335674981",
        "name": "fetch MetOffice",
        "props": [],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "60980e89ea9bcfa2"
            ]
        ]
    },
    {
        "id": "4e9d3afb56f90305",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "383517d3593c4462",
        "name": "OWM Weather",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 420,
        "y": 560,
        "wires": [
            [
                "8079f55531a39d92"
            ]
        ]
    },
    {
        "id": "9bcb90ead09b4e17",
        "type": "change",
        "z": "41efd0c335674981",
        "g": "383517d3593c4462",
        "name": "add ENV [OWM]",
        "rules": [
            {
                "t": "set",
                "p": "api_key",
                "pt": "msg",
                "to": "OPEN_WEATHER_API",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "latitude",
                "pt": "msg",
                "to": "LOCATION_LAT",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "longitude",
                "pt": "msg",
                "to": "LOCATION_LON",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "noParamNames",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 480,
        "wires": [
            [
                "6cfee572ec80409c"
            ]
        ]
    },
    {
        "id": "f6da56f7942bb1b7",
        "type": "inject",
        "z": "41efd0c335674981",
        "name": "fetch openWeather",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "9bcb90ead09b4e17"
            ]
        ]
    },
    {
        "id": "6cfee572ec80409c",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "383517d3593c4462",
        "name": "assemble owm request",
        "func": "\nlet url = \"api.openweathermap.org/data/2.5/weather\"\n    + \"?lat=\" + msg.latitude\n    + \"&lon=\" + msg.longitude\n    + \"&appid=\" + msg.api_key;\n\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 520,
        "wires": [
            [
                "4e9d3afb56f90305"
            ]
        ]
    },
    {
        "id": "8079f55531a39d92",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "383517d3593c4462",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 560,
        "wires": [
            [
                "45bb37d930728718"
            ]
        ]
    },
    {
        "id": "45bb37d930728718",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "383517d3593c4462",
        "name": "make openweather insert (sanitized)",
        "func": "let keys = [\n    \"time\",\n    \"temperature\",\n    \"temperature_min\",\n    \"temperature_max\",\n    \"pressure\",\n    \"humidity\",\n    \"visibility\",\n    \"wind_speed\",\n    \"wind_deg\",\n    \"wind_gust\",\n    \"clouds\"\n];\n\ndata = msg.payload;\n\n// do sanitization\nfunction formatTime(t) {\n    // convert unix seconds to milis\n    var parsed_date = new Date(t * 1000);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nfunction sanitize(v) {\n    if (!Number.isFinite(v)) {\n        return null;\n    }\n    return v;\n}\n\nfunction buildPayload(data) {\n    let payload = [formatTime(data.dt)];\n    \n    payload.push(sanitize(data.main.temp));\n    payload.push(sanitize(data.main.temp_min));\n    payload.push(sanitize(data.main.temp_max));\n    payload.push(sanitize(data.main.pressure));\n    payload.push(sanitize(data.main.humidity));\n    payload.push(sanitize(data[\"visibility\"]));\n    payload.push(sanitize(data.wind.speed));\n    payload.push(sanitize(data.wind.deg));\n    payload.push(sanitize(data.wind.gust));\n    payload.push(sanitize(data.clouds[\"all\"]));\n    \n    return payload;\n}\n\nmsg.payload = buildPayload(data);\n\nmsg.topic = \"INSERT INTO openweather_data (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES(\" + msg.payload.map(k=>\"?\").join(\", \") + \") ;\"\n ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 620,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "aee55ea055733990",
        "type": "inject",
        "z": "41efd0c335674981",
        "name": "fetch CO2",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "f05d252014a14da8"
            ]
        ]
    },
    {
        "id": "f05d252014a14da8",
        "type": "change",
        "z": "41efd0c335674981",
        "g": "286d18d6ca53faf7",
        "name": "add ENV [CO2]",
        "rules": [
            {
                "t": "set",
                "p": "latitude",
                "pt": "msg",
                "to": "LOCATION_LAT",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "longitude",
                "pt": "msg",
                "to": "LOCATION_LON",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 720,
        "wires": [
            [
                "dd984ef51058f4b8"
            ]
        ]
    },
    {
        "id": "fc807377bb8b1261",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "286d18d6ca53faf7",
        "name": "extract postcode",
        "func": "let postcode = msg.payload\n.data\n.relationships\n.nearest_postcode\n.data\n.id\n.split(\" \")[0];\n\n// clean-up\nreturn {\n    postcode: postcode\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 840,
        "wires": [
            [
                "29c7a734cf779ba6"
            ]
        ]
    },
    {
        "id": "dd984ef51058f4b8",
        "type": "template",
        "z": "41efd0c335674981",
        "g": "286d18d6ca53faf7",
        "name": "postcode API",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "https://findthatpostcode.uk/points/{{latitude}},{{longitude}}.json",
        "output": "str",
        "x": 440,
        "y": 760,
        "wires": [
            [
                "d89f7bfce63ec593"
            ]
        ]
    },
    {
        "id": "d89f7bfce63ec593",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "286d18d6ca53faf7",
        "name": "findthatpostcode.uk",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 440,
        "y": 800,
        "wires": [
            [
                "fc807377bb8b1261"
            ]
        ]
    },
    {
        "id": "29c7a734cf779ba6",
        "type": "template",
        "z": "41efd0c335674981",
        "g": "60cc3d0fc0589906",
        "name": "carbonintensity API",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "https://api.carbonintensity.org.uk/regional/postcode/{{postcode}}",
        "output": "str",
        "x": 770,
        "y": 720,
        "wires": [
            [
                "b38591e91048886b"
            ]
        ]
    },
    {
        "id": "b38591e91048886b",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "60cc3d0fc0589906",
        "name": "CO2 API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 780,
        "y": 760,
        "wires": [
            [
                "561c3d1db08a9eee"
            ]
        ]
    },
    {
        "id": "561c3d1db08a9eee",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "60cc3d0fc0589906",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 800,
        "wires": [
            [
                "56d1c2bf0b4b0c8b"
            ]
        ]
    },
    {
        "id": "56d1c2bf0b4b0c8b",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "60cc3d0fc0589906",
        "name": "make carbon_dioxide insert (sanitized)",
        "func": "// do sanitization\nfunction formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nlet data = msg.payload.data[0];\n\nmsg.payload = [\n    formatTime(data.data[0].to),\n    data.data[0].intensity.forecast,\n    data.data[0].intensity.index,\n    data.shortname,\n];\n\nlet keys = [\n    \"time\",\n    \"intensity\",\n    \"indicator\",\n    \"location\",\n];\ndata.data[0].generationmix.forEach((v, i) => {\n   keys.push(`fuel_${v.fuel}`);\n   msg.payload.push(v.perc);\n});\n\nmsg.topic = `INSERT INTO carbon_dioxide\n(\\`${keys.join(\"\\`, \\`\")}\\`)\nVALUES (${keys.map(() => \"?\").join(\", \")})`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 840,
        "wires": [
            [
                "2d4d5719948141ed",
                "0a9ec95216811926"
            ]
        ]
    },
    {
        "id": "86dce4587f537dc5",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "301454ba5f8b69c6",
        "name": "assemble met request",
        "func": "let headers = {\n    \"X-IBM-Client-Id\": msg.api_key,\n    \"X-IBM-Client-Secret\": msg.secret_key,\n    \"accept\": \"application/json\"\n};\n\nlet url = \"https://rgw.5878-e94b1c46.eu-gb.apiconnect.appdomain.cloud\"\n+ \"/metoffice/production/v0/forecasts/point/hourly\"\n+ \"?excludeParameterMetadata=\"+msg.noParamNames\n+ \"&includeLocationName=true\"\n+ \"&latitude=\"+msg.latitude+\"&longitude=\"+msg.longitude;\n\nmsg.url = url;\nmsg.headers = headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "1b14e8944872d3bd"
            ]
        ]
    },
    {
        "id": "1b14e8944872d3bd",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "301454ba5f8b69c6",
        "name": "MetOffice Spot",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 440,
        "y": 320,
        "wires": [
            [
                "af4a05c086fff45c"
            ]
        ]
    },
    {
        "id": "af4a05c086fff45c",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "301454ba5f8b69c6",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "e095e9be7c46b4d1",
                "c7377789b13b2617",
                "14e9066473542cf7",
                "055f799e3ee4baaf"
            ]
        ]
    },
    {
        "id": "e095e9be7c46b4d1",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "301454ba5f8b69c6",
        "name": "make metoffice_spot insert (sanitized)",
        "func": "let keys = [\n    \"time\",\n    \"screenTemperature\",\n    \"maxScreenAirTemp\",\n    \"minScreenAirTemp\",\n    \"screenDewPointTemperature\",\n    \"feelsLikeTemperature\",\n    \"windSpeed10m\",\n    \"windDirectionFrom10m\",\n    \"windGustSpeed10m\",\n    \"max10mWindGust\",\n    \"visibility\",\n    \"screenRelativeHumidity\",\n    \"mslp\",\n    \"uvIndex\",\n    \"significantWeatherCode\",\n    \"precipitationRate\",\n    \"totalPrecipAmount\",\n    \"totalSnowAmount\",\n    \"probOfPrecipitation\"\n];\n\ndata = msg.payload.features[0].properties.timeSeries;\n\n// do sanitization\nfunction formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nfunction buildPayload(item) {\n    let payload = [formatTime(item.time)];\n    keys.filter(k => k != \"time\")\n        .forEach((k, i) => {\n            let val = item[k];\n            if (!Number.isFinite(val)) {\n                //throw Error(k + \" is not a number (\" + val + \")\");\n                val = null;\n            }\n            payload.push(val);\n        }\n    );\n    \n    return payload;\n}\n\nmsg.payload = data.map(item => buildPayload(item));\n\nmsg.topic = \"INSERT INTO metoffice_spot (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES \" + msg.payload.map(k=>\"(?)\").join(\", \")\n + \"ON DUPLICATE KEY UPDATE \"\n + keys\n    .filter(k=>k != \"time\")\n    .map(k=>k + \"=VALUES(\"+ k + \")\").join(\", \")\n + \";\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "14e9066473542cf7",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "de3ca48ba0467e38",
        "name": "SLIMJAB Predict Solar",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aimlac-models:5000/power/predict-solar",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 940,
        "y": 320,
        "wires": [
            [
                "e118c5c9d1963b6b"
            ]
        ]
    },
    {
        "id": "c7377789b13b2617",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "de3ca48ba0467e38",
        "name": "SLIMJAB Predict Wind",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aimlac-models:5000/power/predict-wind",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 940,
        "y": 280,
        "wires": [
            [
                "e118c5c9d1963b6b"
            ]
        ]
    },
    {
        "id": "e118c5c9d1963b6b",
        "type": "join",
        "z": "41efd0c335674981",
        "g": "de3ca48ba0467e38",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1170,
        "y": 360,
        "wires": [
            [
                "2d41fd167df8b7f8"
            ]
        ]
    },
    {
        "id": "2d41fd167df8b7f8",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "de3ca48ba0467e38",
        "name": "make_predictions_insert",
        "func": "const formatTime = (dt) => {\n    let parsedDate = new Date(dt);\n    if ( isNaN(parsedDate.valueOf()) )\n        throw Error(`Not a valid time ${dt}`)\n    return parsedDate\n}\n\nconst columns = [\n    \"time\",\n    \"WindSpeed\",\n    \"WindPower\",\n    \"SolarPower\",\n    \"HQPowerDemand\",\n    \"HQTemperature\"\n]\n\nconst payload = msg.payload\n\nmsg = {}\n\nmsg.topic = \"INSERT INTO powerPrediction (\"\n  + columns.map(str => \"`\" + str + \"`\").join(\", \") + \") \"\n  + \"VALUES \" + \"(?)\" + \", (?)\".repeat(payload[0].length - 1)\n  + \" ON DUPLICATE KEY UPDATE \"\n  + columns.map(str => str + \"=VALUES(\" + str + \")\").join(\", \")\n  + \";\"\n\nmsg.payload = _.zip(...payload).map(\n    parts => {\n        let row = _.assignIn(...parts)\n        row.time = formatTime(row.time)\n        return _.map(columns, _.propertyOf(row))\n    }\n)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "055f799e3ee4baaf",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "de3ca48ba0467e38",
        "name": "SLIMJAB Predict Onsite",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aimlac-models:5000/power/predict-onsite",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 950,
        "y": 360,
        "wires": [
            [
                "e118c5c9d1963b6b"
            ]
        ]
    },
    {
        "id": "41a4f8e299131a47",
        "type": "change",
        "z": "41efd0c335674981",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "api_key",
                "pt": "msg",
                "to": "ELEXON_API_KEY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 1140,
        "wires": [
            [
                "f14be92741d47d3f",
                "a844eb19130b02ca"
            ]
        ]
    },
    {
        "id": "f14be92741d47d3f",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "451de0b60f30a017",
        "name": "assemble DERSYSDATA request",
        "func": "function to_string(date) {\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = date.getFullYear();\n    return yyyy + \"-\" + mm + \"-\" + dd;\n}\n\nvar today = new Date();\n\nvar yesterday = new Date();\nyesterday.setDate(yesterday.getDate() - 2);\n\nvar url = \"https://api.bmreports.com/BMRS/DERSYSDATA/v1\"\n    + \"?APIKey=\" + msg.api_key\n    + \"&FromSettlementDate=\" + to_string(yesterday)\n    + \"&ToSettlementDate=\" + to_string(today)\n    + \"&ServiceType=xml\";\n\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 940,
        "wires": [
            [
                "b535743cbf53aeee"
            ]
        ]
    },
    {
        "id": "b535743cbf53aeee",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "451de0b60f30a017",
        "name": "Elexon BMRS",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 760,
        "y": 940,
        "wires": [
            [
                "aaa2f743cd03ab41"
            ]
        ]
    },
    {
        "id": "aaa2f743cd03ab41",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "451de0b60f30a017",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 980,
        "wires": [
            [
                "5ce37c996f8be3b4"
            ]
        ]
    },
    {
        "id": "d0672dbd8577b0a0",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "451de0b60f30a017",
        "name": "make elexon insert (not sanitized)",
        "func": "let keys = [\n    // always the same:\n    //\"RecordType\",\n    \"settlementDate\",\n    \"settlementPeriod\",\n    \"systemSellPrice\",\n    \"systemBuyPrice\",\n    \"bSADDefault\",\n    \"priceDerivationCode\",\n    \"reserveScarcityPrice\",\n    \"indicativeNetImbalanceVolume\",\n    \"sellPriceAdjustment\",\n    \"buyPriceAdjustment\",\n    \"replacementPrice\",\n    \"replacementPriceCalculationVolume\",\n    \"totalSystemAcceptedOfferVolume\",\n    \"totalSystemAcceptedBidVolume\",\n    \"totalSystemTaggedAcceptedOfferVolume\",\n    \"totalSystemTaggedAcceptedBidVolume\",\n    \"totalSystemPricedAcceptedOfferVolume\",\n    \"totalSystemAdjustmentSellVolume\",\n    \"totalSystemAdjustmentBuyVolume\",\n    \"totalSystemTaggedAdjustmentSellVolume\",\n    \"totalSystemTaggedAdjustmentBuyVolume\"\n];\n\nfunction formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\ndata = msg.payload\n    .response\n    .responseBody[0]\n    .responseList[0]\n    .item;\n\nfunction buildPayload(data) {\n    let payload = [];\n    data.forEach(item => {\n        parsed = keys.map(k => v = item[k] == \"NULL\" ? 0.0 : item[k]);\n        parsed[0] = formatTime(parsed[0]);\n        payload.push(parsed);\n    });\n    return payload;\n}\n\nmsg.payload = buildPayload(data);\n\nmsg.topic = \"INSERT INTO elexonDERSYdata (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES\" + msg.payload.map(k=>\"(?)\").join(\", \")\n + \"ON DUPLICATE KEY UPDATE \"\n + keys\n    .filter(k=>k != \"settlementDate\" && k != \"settlementPeriod\")\n    .map(k=>k + \"=VALUES(\"+ k + \")\").join(\", \")\n + \";\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1020,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "5ce37c996f8be3b4",
        "type": "xml",
        "z": "41efd0c335674981",
        "g": "451de0b60f30a017",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 670,
        "y": 980,
        "wires": [
            [
                "d0672dbd8577b0a0",
                "650629a32d8e0fb5"
            ]
        ]
    },
    {
        "id": "a844eb19130b02ca",
        "type": "function",
        "z": "41efd0c335674981",
        "name": "assemble BMRS code request",
        "func": "function to_string(date) {\n    let dd = String(today.getDate()).padStart(2, '0');\n    let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    let yyyy = today.getFullYear();\n    return yyyy + \"-\" + mm + \"-\" + dd;\n}\n\nlet today = new Date();\nlet yesterday = (new Date()).setDate(today.getDate() - 1);\n\nfunction deepcopy(msg) {\n    return JSON.parse(JSON.stringify(msg));\n}\n\nfunction make_msg_for(msg, code) {\n    let url = \"https://api.bmreports.com/BMRS/\"\n        + code\n        + \"/v1\"\n        + \"?APIKey=\" + msg.api_key\n        + \"&SettlementDate=\" + to_string(today)\n        + \"&Period=*\"\n        + \"&ServiceType=xml\";\n    \n    copy = deepcopy(msg);\n    copy.url = url;\n    return copy;\n}\n\n// Actual aggregated generation perType\nmsg1 = make_msg_for(msg, \"B1620\");\n\n// Day ahead total load forecast per bidding zone\nmsg2 = make_msg_for(msg, \"B0620\");\n\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1220,
        "wires": [
            [
                "360f5eb08bc78624"
            ],
            [
                "ae0ab5e063239ec3"
            ]
        ]
    },
    {
        "id": "360f5eb08bc78624",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "59101f8bda45ee05",
        "name": "Elexon BMRS",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 600,
        "y": 1120,
        "wires": [
            [
                "e3b8279b1d1931f5"
            ]
        ]
    },
    {
        "id": "e3b8279b1d1931f5",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "59101f8bda45ee05",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1120,
        "wires": [
            [
                "b1522bca7938df32"
            ]
        ]
    },
    {
        "id": "b1522bca7938df32",
        "type": "xml",
        "z": "41efd0c335674981",
        "g": "59101f8bda45ee05",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 590,
        "y": 1160,
        "wires": [
            [
                "87b60729bba7901e"
            ]
        ]
    },
    {
        "id": "31c16149e6bf119a",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "4a02678af8a8f82d",
        "name": "make B0620 insert (not sanitized)",
        "func": "let keys = [\n    // always the same:\n    //\"RecordType\",\n    \"settlementDate\",\n    \"settlementPeriod\",\n    \"quantity\",\n    //\"documentType\",\n    //\"businessType\",\n    //\"processType\",\n    //\"objectAggregation\",\n    //\"curveType\",\n    //\"resolution\",\n    //\"unitOfMeasure\",\n    \"activeFlag\",\n    //\"documentID\",\n    //\"documentRevNum\"\n];\n\nfunction formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\ndata = msg.payload\n    .response\n    .responseBody[0]\n    .responseList[0]\n    .item;\n\nfunction buildPayload(data) {\n    let payload = [];\n    data.forEach(item => {\n        parsed = keys.map(k => v = item[k] == \"NULL\" ? 0.0 : item[k]);\n        parsed[0] = formatTime(parsed[0]);\n        // parse period to a number\n        parsed[1] = parseInt(parsed[1], 10);\n        // convert quantitiy to a number\n        parsed[2] = parseInt(parsed[2], 10);\n        payload.push(parsed);\n    });\n    return payload;\n}\n\nmsg.payload = buildPayload(data);\n\nmsg.topic = \"INSERT INTO elexonB0620 (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES\" + msg.payload.map(k=>\"(?)\").join(\", \")\n + \"ON DUPLICATE KEY UPDATE \"\n + keys\n    .filter(k=>k != \"settlementDate\" && k != \"settlementPeriod\")\n    .map(k=>k + \"=VALUES(\"+ k + \")\").join(\", \")\n + \";\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1340,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "ae0ab5e063239ec3",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "4a02678af8a8f82d",
        "name": "Elexon BMRS",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 660,
        "y": 1300,
        "wires": [
            [
                "1f7b72513a3d5c1d"
            ]
        ]
    },
    {
        "id": "1f7b72513a3d5c1d",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "4a02678af8a8f82d",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1300,
        "wires": [
            [
                "e991ff1c92974ab9"
            ]
        ]
    },
    {
        "id": "e991ff1c92974ab9",
        "type": "xml",
        "z": "41efd0c335674981",
        "g": "4a02678af8a8f82d",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 630,
        "y": 1340,
        "wires": [
            [
                "31c16149e6bf119a"
            ]
        ]
    },
    {
        "id": "3b2b022345cea635",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "59101f8bda45ee05",
        "name": "make B1620 insert (not sanitized)",
        "func": "function formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\npsrt_keys = msg.psrt_keys;\ndata = msg.payload;\n\nlet keys = ([\"settlementDate\", \"settlementPeriod\"]).concat(psrt_keys);\nlet table = [];\n\nObject.keys(data).forEach(k => {\n    // get the data for this date\n    let frame = data[k];\n    Object.keys(frame).forEach(period => {\n        // get the data for this date + period\n        let item = frame[period];\n        let row = (\n            [formatTime(k), parseInt(period, 10)]\n            // insert all of the different resources quantities\n        ).concat(psrt_keys.map(i=>item[i]));\n        table.push(row);\n    });\n});\n\nmsg.payload = table;\n\ndelete msg.psrt_keys;\n\nmsg.topic = \"INSERT INTO elexonB1620 (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES\" + msg.payload.map(k=>\"(?)\").join(\", \")\n + \"ON DUPLICATE KEY UPDATE \"\n + keys\n    .filter(k=>k != \"settlementDate\" && k != \"settlementPeriod\")\n    .map(k=>k + \"=VALUES(\"+ k + \")\").join(\", \")\n + \";\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1200,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "87b60729bba7901e",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "59101f8bda45ee05",
        "name": "aggregate resource type",
        "func": "// to camel case\nfunction camelize(str) {\n    let text = String(str).replace(/[\"\\-]/g, \"\");\n    return text.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n        if (+match === 0) return \"\"; // or if (/\\s+/.test(match)) for white spaces\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n}\n\nclass DefaultDict {\n  constructor(defaultInit) {\n    return new Proxy({}, {\n      get: (target, name) => name in target ?\n        target[name] :\n        (target[name] = typeof defaultInit === 'function' ?\n          defaultInit() :\n          defaultInit)\n    })\n  }\n}\n\n// aggregate data:\n// time -> period -> powerSystemResourceType -> quantity\nlet aggregate = new DefaultDict(\n    () => new DefaultDict(\n        // quantity aggregate\n        () => new DefaultDict(0.0)    \n    )\n);\n\ndata = msg.payload\n    .response\n    .responseBody[0]\n    .responseList[0]\n    .item;\n\nlet psrt_keys = [];\ndata.forEach(item => {\n    let psrt = camelize(item.powerSystemResourceType);\n    // keep a collection of the keys\n    // so assembling the database query is easier\n    if (! psrt_keys.includes(psrt)) {\n        psrt_keys.push(psrt);\n    }\n    aggregate[item.settlementDate][item.settlementPeriod][psrt]\n        += parseInt(item.quantity, 10);\n});\n\nmsg.payload = aggregate;\nmsg.psrt_keys = psrt_keys;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1160,
        "wires": [
            [
                "3b2b022345cea635"
            ]
        ]
    },
    {
        "id": "2d4d5719948141ed",
        "type": "mysql",
        "z": "41efd0c335674981",
        "mydb": "a1c86bd095899ec8",
        "name": "LLanwrytd DB",
        "x": 1540,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "706862024e9862c1",
        "type": "split",
        "z": "41efd0c335674981",
        "g": "109427101203db3b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 1460,
        "wires": [
            [
                "5d5bd7850877bb8c"
            ]
        ]
    },
    {
        "id": "5d5bd7850877bb8c",
        "type": "change",
        "z": "41efd0c335674981",
        "g": "109427101203db3b",
        "name": "set url",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "url",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 1460,
        "wires": [
            [
                "e568e1c03163a8bb"
            ]
        ]
    },
    {
        "id": "e568e1c03163a8bb",
        "type": "http request",
        "z": "41efd0c335674981",
        "g": "109427101203db3b",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 530,
        "y": 1540,
        "wires": [
            [
                "b0d0d92ca5809d46"
            ]
        ]
    },
    {
        "id": "d7f8e55bab0f51fa",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "109427101203db3b",
        "name": "make urls",
        "func": "let startDate = new Date()\nlet endDate = new Date()\n\nstartDate.setDate(startDate.getDate() - 1)\nendDate.setDate(endDate.getDate() + 1)\n\nconst formatDateString = (date) => {\n    let year = date.getFullYear()\n    let month = (date.getMonth() + 1).toString().padStart(2, \"0\")\n    let day = date.getDate().toString().padStart(2, \"0\")\n    return `${year}-${month}-${day}`\n}\n\nlet host = `http://${env.get(\"AIMLAC_RSE_ADDR\")}`\nlet param = `start_date=${formatDateString(startDate)}`\n            + `&end_date=${formatDateString(endDate)}`\n\n\nmsg.payload = [\n    `${host}/auction/market/clearout-prices?${param}`,\n    `${host}/auction/market/imbalance?${param}`\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1460,
        "wires": [
            [
                "706862024e9862c1"
            ]
        ]
    },
    {
        "id": "7494caf36e80f674",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "109427101203db3b",
        "name": "make clearout-prices insert",
        "func": "// do sanitization\nconst formatTime = (t) => {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nconst sanitize = (v) => {\n    if (!Number.isFinite(v)) {\n        return null;\n    }\n    return v;\n}\n\nlet keys = [\n    \"settlementDate\",\n    \"settlementPeriod\",\n    \"clearoutPrice\",\n    \"clearoutVolume\"\n]\n\nmsg = {\n    payload: msg.payload\n}\n\nmsg.topic = \"INSERT INTO rseMarket (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES \" + msg.payload.map(k=>\"(?)\").join(\", \")\n + \" ON DUPLICATE KEY UPDATE \"\n + keys\n    .filter(k=>k != \"settlementDate\" && k != \"settlementPeriod\")\n    .map(k=>k + \"=VALUES(\"+ k + \")\").join(\", \")\n + \";\";\n \n msg.payload = msg.payload.map(data => [\n     formatTime(data.date),\n     sanitize(data.period) * 2 - 1,\n     sanitize(data.price),\n     sanitize(data.volume)\n])\n \n return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1520,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "ce717993f602ab1f",
        "type": "inject",
        "z": "41efd0c335674981",
        "name": "fetch RSE market",
        "props": [],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1460,
        "wires": [
            [
                "d7f8e55bab0f51fa"
            ]
        ]
    },
    {
        "id": "b0d0d92ca5809d46",
        "type": "switch",
        "z": "41efd0c335674981",
        "g": "109427101203db3b",
        "name": "",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "clearout-prices",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "imbalance",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1540,
        "wires": [
            [
                "7494caf36e80f674"
            ],
            [
                "eb1d5be025b20f15"
            ]
        ]
    },
    {
        "id": "eb1d5be025b20f15",
        "type": "function",
        "z": "41efd0c335674981",
        "g": "109427101203db3b",
        "name": "make imbalance insert",
        "func": "// do sanitization\nconst formatTime = (t) => {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nconst sanitize = (v) => {\n    if (!Number.isFinite(v)) {\n        return null;\n    }\n    return v;\n}\n\nlet keys = [\n    \"settlementDate\",\n    \"settlementPeriod\",\n    \"imbalancePrice\"\n]\n\nmsg = {\n    payload: msg.payload\n}\n\nmsg.topic = \"INSERT INTO rseMarket (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES \" + msg.payload.map(k=>\"(?)\").join(\", \")\n + \" ON DUPLICATE KEY UPDATE \"\n + keys\n    .filter(k=>k != \"settlementDate\" && k != \"settlementPeriod\")\n    .map(k=>k + \"=VALUES(\"+ k + \")\").join(\", \")\n + \";\";\n \n msg.payload = msg.payload.map(data => [\n     formatTime(data.date),\n     sanitize(data.period),\n     sanitize(data.price)\n])\n \n return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1560,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    },
    {
        "id": "93534d676abdef97",
        "type": "inject",
        "z": "41efd0c335674981",
        "name": "place bid",
        "props": [],
        "repeat": "",
        "crontab": "45 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 1680,
        "wires": [
            [
                "14fafb67ec97e32b"
            ]
        ]
    },
    {
        "id": "14fafb67ec97e32b",
        "type": "function",
        "z": "41efd0c335674981",
        "name": "assemble bidding request",
        "func": "msg.url = \"http://aimlac-models:5000/bid/set\"\nmsg.method = \"POST\"\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n}\nmsg.payload = {\n    \"bidder\": \"default\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1680,
        "wires": [
            [
                "f00fd63a84834fc9"
            ]
        ]
    },
    {
        "id": "f00fd63a84834fc9",
        "type": "http request",
        "z": "41efd0c335674981",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 1680,
        "wires": [
            [
                "650629a32d8e0fb5"
            ]
        ]
    },
    {
        "id": "53616078bf906c44",
        "type": "inject",
        "z": "41efd0c335674981",
        "name": "fetch elexon",
        "props": [],
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "41a4f8e299131a47"
            ]
        ]
    },
    {
        "id": "0a9ec95216811926",
        "type": "http request",
        "z": "41efd0c335674981",
        "name": "calculateCO2saved",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aimlac-models:5000/co2/set",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1050,
        "y": 720,
        "wires": [
            [
                "3e923a993e64d619"
            ]
        ]
    },
    {
        "id": "3e923a993e64d619",
        "type": "function",
        "z": "41efd0c335674981",
        "name": "insertCO2saved",
        "func": "const formatTime = (dt) => {\n    let parsedDate = new Date(dt);\n    if ( isNaN(parsedDate.valueOf()) )\n        throw Error(`Not a valid time ${dt}`)\n    return parsedDate\n}\n\nconst columns = [\n    \"time\",\n    \"co2saved\"\n]\n\nconst payload = msg.payload[0]\n\n\n\nmsg = {}\n\n\nmsg.topic = \"INSERT INTO carbon_dioxide_saved (\"\n        + \"`time`, `co2saved`\"\n    + \") VALUES (\"\n        + \":time, :co2saved\"\n    + \");\";\n\n// do sanitization\nObject.keys(payload)\n    .filter(k => k != \"time\" )\n    .forEach((k, i) => {\n        var val = payload[k];\n        if ( !Number.isFinite(val) ) {\n            throw Error(k + \" is not a number (\" + val + \")\");\n        }\n    });\n\nvar parsed_date = new Date(payload.time);\nif ( isNaN(parsed_date.valueOf()) ) {\n    throw Error(\"Invalid date \", msg.payload.time);\n}\n\npayload.time = parsed_date;\n\n// overwrite payload\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 720,
        "wires": [
            [
                "2d4d5719948141ed"
            ]
        ]
    }
]
[
    {
        "id": "0f058a7f547c3458",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1c86bd095899ec8",
        "type": "MySQLdatabase",
        "name": "llanwrytd",
        "host": "172.18.5.1",
        "port": "3306",
        "db": "llanwrytd",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "4c8a4750891f7844",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "name": "Llanwrtyd Power",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 530,
        "y": 140,
        "wires": [
            [
                "f832e3d01d480950"
            ]
        ]
    },
    {
        "id": "b6c8d13a7ff9da14",
        "type": "inject",
        "z": "0f058a7f547c3458",
        "name": "fetch RSE",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "307ab4e6f668b177"
            ]
        ]
    },
    {
        "id": "6fa52c2549c15f6c",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "d": true,
        "name": "Llanwrtyd 30m Average Power",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "38e0c3e53e36792a",
        "type": "debug",
        "z": "0f058a7f547c3458",
        "name": "internal log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "e1d07ecec1d5ae7a",
        "type": "template",
        "z": "0f058a7f547c3458",
        "name": "make url",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "http://{{AIMLAC_RSE_ADDR}}/sim/llanwrtyd-wells",
        "output": "str",
        "x": 340,
        "y": 140,
        "wires": [
            [
                "4c8a4750891f7844",
                "f35df1df4852048f"
            ]
        ]
    },
    {
        "id": "be9abe3da5580fa2",
        "type": "function",
        "z": "0f058a7f547c3458",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "9ca09eb79f9ea5cc"
            ]
        ]
    },
    {
        "id": "f35df1df4852048f",
        "type": "template",
        "z": "0f058a7f547c3458",
        "name": "append destination",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{url}}/30m-average-power",
        "output": "str",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "6fa52c2549c15f6c"
            ]
        ]
    },
    {
        "id": "12e7d34356a8a186",
        "type": "function",
        "z": "0f058a7f547c3458",
        "name": "assemble met request",
        "func": "let headers = {\n    \"X-IBM-Client-Id\": msg.api_key,\n    \"X-IBM-Client-Secret\": msg.secret_key,\n    \"accept\": \"application/json\"\n};\n\nlet url = \"https://rgw.5878-e94b1c46.eu-gb.apiconnect.appdomain.cloud\"\n+ \"/metoffice/production/v0/forecasts/point/hourly\"\n+ \"?excludeParameterMetadata=\"+msg.noParamNames\n+ \"&includeLocationName=true\"\n+ \"&latitude=\"+msg.latitude+\"&longitude=\"+msg.longitude;\n\nmsg.url = url;\nmsg.headers = headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 220,
        "wires": [
            [
                "67b87407f16763d3"
            ]
        ]
    },
    {
        "id": "67b87407f16763d3",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "name": "MetOffice Spot",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 280,
        "y": 260,
        "wires": [
            [
                "be9abe3da5580fa2"
            ]
        ]
    },
    {
        "id": "6d438a7777ef90fa",
        "type": "change",
        "z": "0f058a7f547c3458",
        "name": "add ENV [MET]",
        "rules": [
            {
                "t": "set",
                "p": "api_key",
                "pt": "msg",
                "to": "MET_API_KEY",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "secret_key",
                "pt": "msg",
                "to": "MET_SECRET_KEY",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "latitude",
                "pt": "msg",
                "to": "52.1051",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "longitude",
                "pt": "msg",
                "to": "-3.6680",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "noParamNames",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "12e7d34356a8a186"
            ]
        ]
    },
    {
        "id": "307ab4e6f668b177",
        "type": "change",
        "z": "0f058a7f547c3458",
        "name": "add ENV [RSE]",
        "rules": [
            {
                "t": "set",
                "p": "AIMLAC_RSE_ADDR",
                "pt": "msg",
                "to": "AIMLAC_RSE_ADDR",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "e1d07ecec1d5ae7a"
            ]
        ]
    },
    {
        "id": "0d66c11f180e1295",
        "type": "comment",
        "z": "0f058a7f547c3458",
        "name": "needs timestamp",
        "info": "",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "522fe73aeb87ccf7",
        "type": "mysql",
        "z": "0f058a7f547c3458",
        "mydb": "a1c86bd095899ec8",
        "name": "LLanwrytd DB",
        "x": 860,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f832e3d01d480950",
        "type": "function",
        "z": "0f058a7f547c3458",
        "name": "assemble onsite insert (sanitized)",
        "func": "\nmsg.topic = \"INSERT INTO energy_onsite (\"\n        + \"`time`, `hq_power`, `hq_temperature`, `computing_center`, `solar`, `wind1`, `wind2`, `wind3`, `wind4`, `windA`, `windB`\"\n    + \") VALUES (\"\n        + \":timedate, :hq_power, :hq_temperature, :computing_center, :solar, :wind1, :wind2, :wind3, :wind4, :windA, :windB\"\n    + \");\";\n\nvar data = msg.payload.elements;\nvar payload = {};\n\npayload.solar = data[\"Llanwrtyd Wells - Solar Generator\"].power;\npayload.wind1 = data[\"Llanwrtyd Wells - Wind Generator 1\"].power;\npayload.wind2 = data[\"Llanwrtyd Wells - Wind Generator 2\"].power;\npayload.wind3 = data[\"Llanwrtyd Wells - Wind Generator 3\"].power;\npayload.wind4 = data[\"Llanwrtyd Wells - Wind Generator 4\"].power;\npayload.windA = data[\"Llanwrtyd Wells - Wind Generator A\"].power;\npayload.windB = data[\"Llanwrtyd Wells - Wind Generator B\"].power;\n\npayload.hq_power = data[\"AIMLAC HQ Llanwrtyd Wells\"].power;\npayload.hq_temperature = data[\"AIMLAC HQ Llanwrtyd Wells\"].temperature;\npayload.computing_center = data[\"Llanwrtyd Wells - Computing Centre\"].power;\n\npayload.timedate = msg.payload.timedate;\n\n// do sanitization\nObject.keys(payload)\n    .filter(k => k != \"timedate\" )\n    .forEach((k, i) => {\n        var val = payload[k];\n        if ( !Number.isFinite(val) ) {\n            throw Error(k + \" is not a number (\" + val + \")\");\n        }\n    });\n\nvar parsed_date = new Date(payload.timedate);\nif ( isNaN(parsed_date.valueOf()) ) {\n    throw Error(\"Invalid date \", msg.payload.timedate);\n}\n\npayload.timedate = parsed_date;\n\n// overwrite payload\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 180,
        "wires": [
            [
                "522fe73aeb87ccf7"
            ]
        ]
    },
    {
        "id": "7f1845d3f45f7bdb",
        "type": "debug",
        "z": "0f058a7f547c3458",
        "name": "log",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "9ca09eb79f9ea5cc",
        "type": "function",
        "z": "0f058a7f547c3458",
        "name": "make metoffice_spot insert (sanitized)",
        "func": "let keys = [\n    \"time\",\n    \"screenTemperature\",\n    \"maxScreenAirTemp\",\n    \"minScreenAirTemp\",\n    \"screenDewPointTemperature\",\n    \"feelsLikeTemperature\",\n    \"windSpeed10m\",\n    \"windDirectionFrom10m\",\n    \"windGustSpeed10m\",\n    \"max10mWindGust\",\n    \"visibility\",\n    \"screenRelativeHumidity\",\n    \"mslp\",\n    \"uvIndex\",\n    \"significantWeatherCode\",\n    \"precipitationRate\",\n    \"totalPrecipAmount\",\n    \"totalSnowAmount\",\n    \"probOfPrecipitation\"\n];\n\ndata = msg.payload.features[0].properties.timeSeries;\n\n// do sanitization\nfunction formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nfunction buildPayload(item) {\n    let payload = [formatTime(item.time)];\n    keys.filter(k => k != \"time\")\n        .forEach((k, i) => {\n            let val = item[k];\n            if (!Number.isFinite(val)) {\n                //throw Error(k + \" is not a number (\" + val + \")\");\n                val = -1; // dump an unphysical(ish) number\n            }\n            payload.push(val);\n        }\n    );\n    \n    return payload;\n}\n\nmsg.payload = data.map(item => buildPayload(item));\n\nmsg.topic = \"INSERT INTO metoffice_spot (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES \" + msg.payload.map(k=>\"(?)\").join(\", \") + \" ;\"\n ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "522fe73aeb87ccf7"
            ]
        ]
    },
    {
        "id": "725fb307c65c8a17",
        "type": "inject",
        "z": "0f058a7f547c3458",
        "name": "fetch MetOffice",
        "props": [],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "6d438a7777ef90fa"
            ]
        ]
    }
]
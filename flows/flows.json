[
    {
        "id": "0f058a7f547c3458",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4e86ad10d01e7a69",
        "type": "group",
        "z": "0f058a7f547c3458",
        "name": "get postcode",
        "style": {
            "stroke": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "6c4546f3e5619681",
            "0f0a67995d4466cb",
            "5d8439e5cea7949c",
            "c0a79f25a32d9fba"
        ],
        "x": 314,
        "y": 779,
        "w": 252,
        "h": 202
    },
    {
        "id": "a8dd6a9bd1b5b7e7",
        "type": "group",
        "z": "0f058a7f547c3458",
        "name": "query co2 data",
        "style": {
            "label": true,
            "stroke": "#d1d1d1"
        },
        "nodes": [
            "7c4a746feef7e395",
            "5b2f17b252887589",
            "c740d05d4981138d",
            "20b610e49e95e971"
        ],
        "x": 574,
        "y": 779,
        "w": 352,
        "h": 202
    },
    {
        "id": "7ea522c95e2a8526",
        "type": "group",
        "z": "0f058a7f547c3458",
        "name": "Open Weather Map",
        "style": {
            "label": true
        },
        "nodes": [
            "af6098234b0d4bd8",
            "affbb4ebfeab8fed",
            "f4f4a5afa8d10c57",
            "fc28542c2b7cc484",
            "5c78d1c35893caaf"
        ],
        "x": 314,
        "y": 539,
        "w": 452,
        "h": 222
    },
    {
        "id": "fa442aa2167cc59e",
        "type": "group",
        "z": "0f058a7f547c3458",
        "name": "Met Office",
        "style": {
            "label": true
        },
        "nodes": [
            "6d438a7777ef90fa",
            "12e7d34356a8a186",
            "67b87407f16763d3",
            "be9abe3da5580fa2",
            "9ca09eb79f9ea5cc"
        ],
        "x": 314,
        "y": 319,
        "w": 432,
        "h": 182
    },
    {
        "id": "69a3c6c3661dff85",
        "type": "group",
        "z": "0f058a7f547c3458",
        "name": "RSE",
        "style": {
            "label": true
        },
        "nodes": [
            "4c8a4750891f7844",
            "6fa52c2549c15f6c",
            "e1d07ecec1d5ae7a",
            "f35df1df4852048f",
            "307ab4e6f668b177",
            "0d66c11f180e1295",
            "f832e3d01d480950"
        ],
        "x": 454,
        "y": 39,
        "w": 732,
        "h": 162
    },
    {
        "id": "d98ee0125271d322",
        "type": "group",
        "z": "0f058a7f547c3458",
        "name": "SLIMJAB Solar & Wind Power Predictions",
        "style": {
            "label": true
        },
        "nodes": [
            "774949dcd02f25c9",
            "ee669a19c9f4527a",
            "3d92c97f493bb373",
            "36c1a732c8c8b7a4"
        ],
        "x": 814,
        "y": 239,
        "w": 392,
        "h": 182
    },
    {
        "id": "a1c86bd095899ec8",
        "type": "MySQLdatabase",
        "name": "llanwrytd",
        "host": "aimlac-database",
        "port": "3306",
        "db": "llanwrytd",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "4c8a4750891f7844",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "g": "69a3c6c3661dff85",
        "name": "Llanwrtyd Power",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 730,
        "y": 160,
        "wires": [
            [
                "f832e3d01d480950"
            ]
        ]
    },
    {
        "id": "b6c8d13a7ff9da14",
        "type": "inject",
        "z": "0f058a7f547c3458",
        "name": "fetch RSE",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "307ab4e6f668b177"
            ]
        ]
    },
    {
        "id": "6fa52c2549c15f6c",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "d": true,
        "g": "69a3c6c3661dff85",
        "name": "Llanwrtyd 30m Average Power",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1030,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "38e0c3e53e36792a",
        "type": "debug",
        "z": "0f058a7f547c3458",
        "name": "internal log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 520,
        "wires": []
    },
    {
        "id": "e1d07ecec1d5ae7a",
        "type": "template",
        "z": "0f058a7f547c3458",
        "g": "69a3c6c3661dff85",
        "name": "make url",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "http://{{AIMLAC_RSE_ADDR}}/sim/llanwrtyd-wells",
        "output": "str",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "4c8a4750891f7844",
                "f35df1df4852048f"
            ]
        ]
    },
    {
        "id": "f35df1df4852048f",
        "type": "template",
        "z": "0f058a7f547c3458",
        "g": "69a3c6c3661dff85",
        "name": "append destination",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{url}}/30m-average-power",
        "output": "str",
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "6fa52c2549c15f6c"
            ]
        ]
    },
    {
        "id": "6d438a7777ef90fa",
        "type": "change",
        "z": "0f058a7f547c3458",
        "g": "fa442aa2167cc59e",
        "name": "add ENV [MET]",
        "rules": [
            {
                "t": "set",
                "p": "api_key",
                "pt": "msg",
                "to": "MET_API_KEY",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "secret_key",
                "pt": "msg",
                "to": "MET_SECRET_KEY",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "latitude",
                "pt": "msg",
                "to": "LOCATION_LAT",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "longitude",
                "pt": "msg",
                "to": "LOCATION_LON",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "noParamNames",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 360,
        "wires": [
            [
                "12e7d34356a8a186"
            ]
        ]
    },
    {
        "id": "307ab4e6f668b177",
        "type": "change",
        "z": "0f058a7f547c3458",
        "g": "69a3c6c3661dff85",
        "name": "add ENV [RSE]",
        "rules": [
            {
                "t": "set",
                "p": "AIMLAC_RSE_ADDR",
                "pt": "msg",
                "to": "AIMLAC_RSE_ADDR",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 120,
        "wires": [
            [
                "e1d07ecec1d5ae7a"
            ]
        ]
    },
    {
        "id": "0d66c11f180e1295",
        "type": "comment",
        "z": "0f058a7f547c3458",
        "g": "69a3c6c3661dff85",
        "name": "needs timestamp",
        "info": "",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "f832e3d01d480950",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "69a3c6c3661dff85",
        "name": "assemble onsite insert (sanitized)",
        "func": "\nmsg.topic = \"INSERT INTO energy_onsite (\"\n        + \"`time`, `hq_power`, `hq_temperature`, `computing_center`, `solar`, `wind1`, `wind2`, `wind3`, `wind4`, `windA`, `windB`\"\n    + \") VALUES (\"\n        + \":timedate, :hq_power, :hq_temperature, :computing_center, :solar, :wind1, :wind2, :wind3, :wind4, :windA, :windB\"\n    + \");\";\n\nvar data = msg.payload.elements;\nvar payload = {};\n\npayload.solar = data[\"Llanwrtyd Wells - Solar Generator\"].power;\npayload.wind1 = data[\"Llanwrtyd Wells - Wind Generator 1\"].power;\npayload.wind2 = data[\"Llanwrtyd Wells - Wind Generator 2\"].power;\npayload.wind3 = data[\"Llanwrtyd Wells - Wind Generator 3\"].power;\npayload.wind4 = data[\"Llanwrtyd Wells - Wind Generator 4\"].power;\npayload.windA = data[\"Llanwrtyd Wells - Wind Generator A\"].power;\npayload.windB = data[\"Llanwrtyd Wells - Wind Generator B\"].power;\n\npayload.hq_power = data[\"AIMLAC HQ Llanwrtyd Wells\"].power;\npayload.hq_temperature = data[\"AIMLAC HQ Llanwrtyd Wells\"].temperature;\npayload.computing_center = data[\"Llanwrtyd Wells - Computing Centre\"].power;\n\npayload.timedate = msg.payload.timedate;\n\n// do sanitization\nObject.keys(payload)\n    .filter(k => k != \"timedate\" )\n    .forEach((k, i) => {\n        var val = payload[k];\n        if ( !Number.isFinite(val) ) {\n            throw Error(k + \" is not a number (\" + val + \")\");\n        }\n    });\n\nvar parsed_date = new Date(payload.timedate);\nif ( isNaN(parsed_date.valueOf()) ) {\n    throw Error(\"Invalid date \", msg.payload.timedate);\n}\n\npayload.timedate = parsed_date;\n\n// overwrite payload\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 160,
        "wires": [
            [
                "522fe73aeb87ccf7"
            ]
        ]
    },
    {
        "id": "7f1845d3f45f7bdb",
        "type": "debug",
        "z": "0f058a7f547c3458",
        "name": "log",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 560,
        "wires": []
    },
    {
        "id": "725fb307c65c8a17",
        "type": "inject",
        "z": "0f058a7f547c3458",
        "name": "fetch MetOffice",
        "props": [],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "6d438a7777ef90fa"
            ]
        ]
    },
    {
        "id": "f4f4a5afa8d10c57",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "g": "7ea522c95e2a8526",
        "name": "OWM Weather",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 420,
        "y": 660,
        "wires": [
            [
                "fc28542c2b7cc484"
            ]
        ]
    },
    {
        "id": "af6098234b0d4bd8",
        "type": "change",
        "z": "0f058a7f547c3458",
        "g": "7ea522c95e2a8526",
        "name": "add ENV [OWM]",
        "rules": [
            {
                "t": "set",
                "p": "api_key",
                "pt": "msg",
                "to": "OPEN_WEATHER_API",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "latitude",
                "pt": "msg",
                "to": "LOCATION_LAT",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "longitude",
                "pt": "msg",
                "to": "LOCATION_LON",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "noParamNames",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 580,
        "wires": [
            [
                "affbb4ebfeab8fed"
            ]
        ]
    },
    {
        "id": "41a2ad85c2f644d4",
        "type": "inject",
        "z": "0f058a7f547c3458",
        "name": "fetch openWeather",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "af6098234b0d4bd8"
            ]
        ]
    },
    {
        "id": "affbb4ebfeab8fed",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "7ea522c95e2a8526",
        "name": "assemble owm request",
        "func": "\nlet url = \"api.openweathermap.org/data/2.5/weather\"\n    + \"?lat=\" + msg.latitude\n    + \"&lon=\" + msg.longitude\n    + \"&appid=\" + msg.api_key;\n\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 620,
        "wires": [
            [
                "f4f4a5afa8d10c57"
            ]
        ]
    },
    {
        "id": "fc28542c2b7cc484",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "7ea522c95e2a8526",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 660,
        "wires": [
            [
                "5c78d1c35893caaf"
            ]
        ]
    },
    {
        "id": "5c78d1c35893caaf",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "7ea522c95e2a8526",
        "name": "make openweather insert (sanitized)",
        "func": "let keys = [\n    \"time\",\n    \"temperature\",\n    \"temperature_min\",\n    \"temperature_max\",\n    \"pressure\",\n    \"humidity\",\n    \"visibility\",\n    \"wind_speed\",\n    \"wind_deg\",\n    \"wind_gust\",\n    \"clouds\"\n];\n\ndata = msg.payload;\n\n// do sanitization\nfunction formatTime(t) {\n    // convert unix seconds to milis\n    var parsed_date = new Date(t * 1000);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nfunction sanitize(v) {\n    if (!Number.isFinite(v)) {\n        return null;\n    }\n    return v;\n}\n\nfunction buildPayload(data) {\n    let payload = [formatTime(data.dt)];\n    \n    payload.push(sanitize(data.main.temp));\n    payload.push(sanitize(data.main.temp_min));\n    payload.push(sanitize(data.main.temp_max));\n    payload.push(sanitize(data.main.pressure));\n    payload.push(sanitize(data.main.humidity));\n    payload.push(sanitize(data[\"visibility\"]));\n    payload.push(sanitize(data.wind.speed));\n    payload.push(sanitize(data.wind.deg));\n    payload.push(sanitize(data.wind.gust));\n    payload.push(sanitize(data.clouds[\"all\"]));\n    \n    return payload;\n}\n\nmsg.payload = buildPayload(data);\n\nmsg.topic = \"INSERT INTO openweather_data (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES(\" + msg.payload.map(k=>\"?\").join(\", \") + \") ;\"\n ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 720,
        "wires": [
            [
                "522fe73aeb87ccf7"
            ]
        ]
    },
    {
        "id": "87f5753b77cb5821",
        "type": "inject",
        "z": "0f058a7f547c3458",
        "name": "fetch CO2",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 820,
        "wires": [
            [
                "c0a79f25a32d9fba"
            ]
        ]
    },
    {
        "id": "c0a79f25a32d9fba",
        "type": "change",
        "z": "0f058a7f547c3458",
        "g": "4e86ad10d01e7a69",
        "name": "add ENV [CO2]",
        "rules": [
            {
                "t": "set",
                "p": "latitude",
                "pt": "msg",
                "to": "LOCATION_LAT",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "longitude",
                "pt": "msg",
                "to": "LOCATION_LON",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 820,
        "wires": [
            [
                "0f0a67995d4466cb"
            ]
        ]
    },
    {
        "id": "6c4546f3e5619681",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "4e86ad10d01e7a69",
        "name": "extract postcode",
        "func": "let postcode = msg.payload\n.data\n.relationships\n.nearest_postcode\n.data\n.id\n.split(\" \")[0];\n\n// clean-up\nreturn {\n    postcode: postcode\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 940,
        "wires": [
            [
                "7c4a746feef7e395"
            ]
        ]
    },
    {
        "id": "0f0a67995d4466cb",
        "type": "template",
        "z": "0f058a7f547c3458",
        "g": "4e86ad10d01e7a69",
        "name": "postcode API",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "https://findthatpostcode.uk/points/{{latitude}},{{longitude}}.json",
        "output": "str",
        "x": 440,
        "y": 860,
        "wires": [
            [
                "5d8439e5cea7949c"
            ]
        ]
    },
    {
        "id": "5d8439e5cea7949c",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "g": "4e86ad10d01e7a69",
        "name": "findthatpostcode.uk",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 440,
        "y": 900,
        "wires": [
            [
                "6c4546f3e5619681"
            ]
        ]
    },
    {
        "id": "7c4a746feef7e395",
        "type": "template",
        "z": "0f058a7f547c3458",
        "g": "a8dd6a9bd1b5b7e7",
        "name": "carbonintensity API",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "https://api.carbonintensity.org.uk/regional/postcode/{{postcode}}",
        "output": "str",
        "x": 730,
        "y": 820,
        "wires": [
            [
                "5b2f17b252887589"
            ]
        ]
    },
    {
        "id": "5b2f17b252887589",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "g": "a8dd6a9bd1b5b7e7",
        "name": "CO2 API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 740,
        "y": 860,
        "wires": [
            [
                "c740d05d4981138d"
            ]
        ]
    },
    {
        "id": "c740d05d4981138d",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "a8dd6a9bd1b5b7e7",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 900,
        "wires": [
            [
                "20b610e49e95e971"
            ]
        ]
    },
    {
        "id": "20b610e49e95e971",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "a8dd6a9bd1b5b7e7",
        "name": "make carbon_dioxide insert (sanitized)",
        "func": "// do sanitization\nfunction formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nlet data = msg.payload.data[0];\n\nmsg.payload = [\n    formatTime(data.data[0].to),\n    data.data[0].intensity.forecast,\n    data.data[0].intensity.index,\n    data.shortname,\n];\n\nlet keys = [\n    \"time\",\n    \"intensity\",\n    \"indicator\",\n    \"location\",\n];\ndata.data[0].generationmix.forEach((v, i) => {\n   keys.push(`fuel_${v.fuel}`);\n   msg.payload.push(v.perc);\n});\n\nmsg.topic = `INSERT INTO carbon_dioxide\n(\\`${keys.join(\"\\`, \\`\")}\\`)\nVALUES (${keys.map(() => \"?\").join(\", \")})`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 940,
        "wires": [
            [
                "522fe73aeb87ccf7"
            ]
        ]
    },
    {
        "id": "12e7d34356a8a186",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "fa442aa2167cc59e",
        "name": "assemble met request",
        "func": "let headers = {\n    \"X-IBM-Client-Id\": msg.api_key,\n    \"X-IBM-Client-Secret\": msg.secret_key,\n    \"accept\": \"application/json\"\n};\n\nlet url = \"https://rgw.5878-e94b1c46.eu-gb.apiconnect.appdomain.cloud\"\n+ \"/metoffice/production/v0/forecasts/point/hourly\"\n+ \"?excludeParameterMetadata=\"+msg.noParamNames\n+ \"&includeLocationName=true\"\n+ \"&latitude=\"+msg.latitude+\"&longitude=\"+msg.longitude;\n\nmsg.url = url;\nmsg.headers = headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 360,
        "wires": [
            [
                "67b87407f16763d3"
            ]
        ]
    },
    {
        "id": "67b87407f16763d3",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "g": "fa442aa2167cc59e",
        "name": "MetOffice Spot",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 420,
        "y": 400,
        "wires": [
            [
                "be9abe3da5580fa2"
            ]
        ]
    },
    {
        "id": "be9abe3da5580fa2",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "fa442aa2167cc59e",
        "name": "strip all but payload",
        "func": "let stripped_message = {\n    payload: msg.payload\n}\nreturn stripped_message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 400,
        "wires": [
            [
                "9ca09eb79f9ea5cc",
                "ee669a19c9f4527a",
                "774949dcd02f25c9"
            ]
        ]
    },
    {
        "id": "9ca09eb79f9ea5cc",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "fa442aa2167cc59e",
        "name": "make metoffice_spot insert (sanitized)",
        "func": "let keys = [\n    \"time\",\n    \"screenTemperature\",\n    \"maxScreenAirTemp\",\n    \"minScreenAirTemp\",\n    \"screenDewPointTemperature\",\n    \"feelsLikeTemperature\",\n    \"windSpeed10m\",\n    \"windDirectionFrom10m\",\n    \"windGustSpeed10m\",\n    \"max10mWindGust\",\n    \"visibility\",\n    \"screenRelativeHumidity\",\n    \"mslp\",\n    \"uvIndex\",\n    \"significantWeatherCode\",\n    \"precipitationRate\",\n    \"totalPrecipAmount\",\n    \"totalSnowAmount\",\n    \"probOfPrecipitation\"\n];\n\ndata = msg.payload.features[0].properties.timeSeries;\n\n// do sanitization\nfunction formatTime(t) {\n    var parsed_date = new Date(t);\n    if ( isNaN(parsed_date.valueOf()) ) {\n        throw Error(\"Not a valid time \" + t);\n    }\n    return parsed_date;\n}\n\nfunction buildPayload(item) {\n    let payload = [formatTime(item.time)];\n    keys.filter(k => k != \"time\")\n        .forEach((k, i) => {\n            let val = item[k];\n            if (!Number.isFinite(val)) {\n                //throw Error(k + \" is not a number (\" + val + \")\");\n                val = null;\n            }\n            payload.push(val);\n        }\n    );\n    \n    return payload;\n}\n\nmsg.payload = data.map(item => buildPayload(item));\n\nmsg.topic = \"INSERT INTO metoffice_spot (\"\n + \"`\" + keys.join(\"`, `\") + \"`) \"\n + \"VALUES \" + msg.payload.map(k=>\"(?)\").join(\", \")\n + \"ON DUPLICATE KEY UPDATE \"\n + keys\n    .filter(k=>k != \"time\")\n    .map(k=>k + \"=VALUES(\"+ k + \")\").join(\", \")\n + \";\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "522fe73aeb87ccf7"
            ]
        ]
    },
    {
        "id": "774949dcd02f25c9",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "g": "d98ee0125271d322",
        "name": "SLIMJAB Predict Solar",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aimlac-models:5000/power/predict-solar",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 940,
        "y": 320,
        "wires": [
            [
                "3d92c97f493bb373"
            ]
        ]
    },
    {
        "id": "ee669a19c9f4527a",
        "type": "http request",
        "z": "0f058a7f547c3458",
        "g": "d98ee0125271d322",
        "name": "SLIMJAB Predict Wind",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aimlac-models:5000/power/predict-wind",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 940,
        "y": 280,
        "wires": [
            [
                "3d92c97f493bb373"
            ]
        ]
    },
    {
        "id": "3d92c97f493bb373",
        "type": "join",
        "z": "0f058a7f547c3458",
        "g": "d98ee0125271d322",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "36c1a732c8c8b7a4"
            ]
        ]
    },
    {
        "id": "36c1a732c8c8b7a4",
        "type": "function",
        "z": "0f058a7f547c3458",
        "g": "d98ee0125271d322",
        "name": "make_predictions_insert",
        "func": "const formatTime = (dt) => {\n    let parsedDate = new Date(dt);\n    if ( isNaN(parsedDate.valueOf()) )\n        throw Error(`Not a valid time ${dt}`)\n    return parsedDate\n}\n\nconst columns = [\n    \"time\",\n    \"WindSpeed\",\n    \"WindPower\",\n    \"SolarPower\"\n]\n\nconst payload = msg.payload\n\nmsg = {}\n\nmsg.topic = \"INSERT INTO powerPrediction (\"\n  + columns.map(str => \"`\" + str + \"`\").join(\", \") + \") \"\n  + \"VALUES \" + \"(?)\" + \", (?)\".repeat(payload[0].length - 1)\n  + \" ON DUPLICATE KEY UPDATE \"\n  + columns.map(str => str + \"=VALUES(\" + str + \")\").join(\", \")\n  + \";\"\n\nmsg.payload = _.zip(...payload).map(\n    ([part1, part2]) => {\n        let row = {\n            ...part1, ...part2,\n            // parse date\n            time: formatTime(part1.time),\n        }\n        return _.map(columns, _.propertyOf(row))\n    }\n)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "522fe73aeb87ccf7"
            ]
        ]
    },
    {
        "id": "522fe73aeb87ccf7",
        "type": "mysql",
        "z": "0f058a7f547c3458",
        "mydb": "a1c86bd095899ec8",
        "name": "LLanwrytd DB",
        "x": 1520,
        "y": 460,
        "wires": [
            []
        ]
    }
]